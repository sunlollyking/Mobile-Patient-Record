package com.chrisdixon.mobilepatientrecord;

import android.util.Log;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

// TODO: Auto-generated Javadoc
/**
 * This class is used to connect to a PHP script via a HTTP GET or POST request whereby, when the
 * parameters have been entered will return a JSONObject based upon the string that is delivered
 * by the PHP script. This can then be decoded later by other classes.
 * @author Chris Dixon
 * @version 1.0
 *
 */
public class GetJSONData {
	
	/** The http client. */
	private DefaultHttpClient httpClient;
	
	/** The j obj. */
	private JSONObject jObj = null;
	
	/** The response. */
	private HttpResponse response;
	
	/** The http entity. */
	private HttpEntity httpEntity;
	
	/** The i stream. */
	private InputStream iStream = null;
	
	/** The json. */
	private String json = "";

	/**
	 * Make http request.
	 *
	 * @param url the url
	 * @param type the type
	 * @param params the params
	 * @return the JSON object
	 */
	public JSONObject makeHttpRequest(String url, String type,
			List<NameValuePair> params) {
		//Creates a HTTP Client 
		httpClient = new DefaultHttpClient();
		try {
			//If the user is posting data to a script
			if (type == "POST") {
				HttpPost httpPost = new HttpPost(url);
				//Add the parameters to the POST input boxes
				httpPost.setEntity(new UrlEncodedFormEntity(params));
				response = httpClient.execute(httpPost);
				httpEntity = response.getEntity();
				//Initialise the InputStream to the content of the website
				iStream = httpEntity.getContent();
			} else if (type == "GET") {				
				//If retrieving data create a string from the parameters
				String stringParam = URLEncodedUtils.format(params, "utf-8");
				url = url + "?" + stringParam;
				HttpGet httpGet = new HttpGet(url);
				response = httpClient.execute(httpGet);
				httpEntity = response.getEntity();
				//Initialise the InputStream to the content of the website
				iStream = httpEntity.getContent();
			} else { 
				//Log that an error occurred as user did not select either GET/POST as connection request type
				Log.d("UNHANDLABLE HTTP REQUEST", "CANNOT HANDLE REQUEST");}
		
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			//The following code reads in the string that is generated by the PHP script and saves the 
			//output as a String, returning it finally in the form of a JSON object.
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					iStream, "iso-8859-1"), 8);
			StringBuilder sBuild = new StringBuilder();
			String line = null;
			while ((line = reader.readLine()) != null) {
				sBuild.append(line + "\n");
			}
			iStream.close();
			json = sBuild.toString();
			Log.d("JSON CONTENTS", json);
		} catch (Exception e) {
			Log.e("BUFFERED READER ERROR", "String unable to view" + e.toString());
		}
		try {
			Log.d("JSON CONTAINS", json);
			jObj = new JSONObject(json);
			//If incorrectly formatted JSON throw the exception belwo
		} catch (JSONException e) {
			Log.e("JSONERROR", "JSON incorrectly formatted " + e.toString());
		}
		return jObj;
	}
}
